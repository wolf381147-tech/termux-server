#!/bin/bash

# 统一Web服务管理器
# 支持Web服务器、文件管理器、Web GUI等功能

# 默认配置
WEB_PORT=8000
WEB_DIR="/data/data/com.termux/files/home/storage/shared/termux-projects"
WEB_USER=$(whoami)

# 颜色定义
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# 显示帮助信息
show_help() {
    echo "用法: service-web [选项] <命令>"
    echo ""
    echo "命令:"
    echo "  start     启动Web服务"
    echo "  stop      停止Web服务"
    echo "  status    查看Web服务状态"
    echo "  info      显示连接信息"
    echo ""
    echo "选项:"
    echo "  -t, --type TYPE         服务类型 (server|manager|gui)"
    echo "  -d, --dir DIRECTORY     Web目录"
    echo "  -p, --port PORT         端口号"
    echo "  -b, --background        后台运行"
    echo "  -g, --with-guide        显示使用指南"
    echo "  -h, --help              显示此帮助信息"
    echo ""
    echo "示例:"
    echo "  service-web start --type server"
    echo "  service-web start --type manager --background"
    echo "  service-web stop --type server"
    echo "  service-web info"
}

# 获取本地IP地址
get_local_ip() {
    ip addr show wlan0 2>/dev/null | grep "inet " | awk '{print $2}' | cut -d/ -f1
}

# 获取公共IP地址
get_public_ip() {
    curl -s https://api.ipify.org 2>/dev/null || echo "无法获取公共IP"
}

# 启动Web服务
start_web() {
    local service_type=$1
    local background=$2
    local port=$3
    local directory=$4
    
    # 设置默认值
    if [ -z "$port" ]; then
        port=$WEB_PORT
    fi
    
    if [ -z "$directory" ]; then
        directory=$WEB_DIR
    fi
    
    echo -e "${BLUE}启动Web服务 ($service_type)...${NC}"
    
    case $service_type in
        server)
            # 启动Python Web服务器
            if [ "$background" = "true" ]; then
                cd "$directory" && python -m http.server $port > /dev/null 2>&1 &
                echo -e "${GREEN}Web服务器已在后台启动${NC}"
            else
                echo -e "${YELLOW}在目录 $directory 启动Web服务器，端口 $port${NC}"
                cd "$directory" && python -m http.server $port
            fi
            ;;
        manager)
            # 启动Web文件管理器
            if [ "$background" = "true" ]; then
                # 杀死可能存在的旧进程
                pkill -f "web-file-manager.py" 2>/dev/null
                
                # 启动Web文件管理器，并保持运行
                while true; do
                    python /data/data/com.termux/files/home/web-file-manager.py > /dev/null 2>&1 &
                    echo -e "${GREEN}Web文件管理器已在后台启动${NC}"
                    break
                done
            else
                python /data/data/com.termux/files/home/web-file-manager.py
            fi
            ;;
        gui)
            # 启动Web GUI
            echo -e "${YELLOW}启动Web GUI...${NC}"
            python /data/data/com.termux/files/home/web-gui/app.py
            ;;
        *)
            echo -e "${RED}未知服务类型: $service_type${NC}"
            return 1
            ;;
    esac
}

# 停止Web服务
stop_web() {
    local service_type=$1
    
    echo -e "${BLUE}停止Web服务 ($service_type)...${NC}"
    
    case $service_type in
        server)
            pkill -f "http.server" 2>/dev/null
            echo -e "${GREEN}Web服务器已停止${NC}"
            ;;
        manager)
            pkill -f "web-file-manager.py" 2>/dev/null
            echo -e "${GREEN}Web文件管理器已停止${NC}"
            ;;
        gui)
            pkill -f "web-gui/app.py" 2>/dev/null
            echo -e "${GREEN}Web GUI已停止${NC}"
            ;;
        *)
            echo -e "${RED}未知服务类型: $service_type${NC}"
            return 1
            ;;
    esac
}

# 查看Web服务状态
status_web() {
    local service_type=$1
    
    case $service_type in
        server)
            if pgrep -f "http.server" > /dev/null; then
                echo -e "${GREEN}Web服务器正在运行${NC}"
            else
                echo -e "${RED}Web服务器未运行${NC}"
            fi
            ;;
        manager)
            if pgrep -f "web-file-manager.py" > /dev/null; then
                echo -e "${GREEN}Web文件管理器正在运行${NC}"
            else
                echo -e "${RED}Web文件管理器未运行${NC}"
            fi
            ;;
        gui)
            if pgrep -f "web-gui/app.py" > /dev/null; then
                echo -e "${GREEN}Web GUI正在运行${NC}"
            else
                echo -e "${RED}Web GUI未运行${NC}"
            fi
            ;;
        *)
            echo -e "${RED}未知服务类型: $service_type${NC}"
            return 1
            ;;
    esac
}

# 显示连接信息
show_info() {
    local with_guide=$1
    local port=$2
    
    # 设置默认端口
    if [ -z "$port" ]; then
        port=$WEB_PORT
    fi
    
    local local_ip=$(get_local_ip)
    local public_ip=$(get_public_ip)
    
    if [ -z "$local_ip" ]; then
        local_ip="无法获取本地IP，请检查WiFi连接"
    fi
    
    echo "=========================================="
    echo "           🌐 Web服务连接信息"
    echo "=========================================="
    echo "📱 本地IP: $local_ip"
    echo "🌐 公共IP: $public_ip"
    echo "🔌 端口: $port"
    echo "📂 目录: $WEB_DIR"
    echo "=========================================="
    echo "💻 访问地址:"
    echo "   http://$local_ip:$port"
    echo "=========================================="
    
    if [ "$with_guide" = "true" ]; then
        echo ""
        echo "💡 使用指南:"
        echo "   1. 确保手机和电脑在同一WiFi网络"
        echo "   2. 在电脑浏览器中打开上述地址"
        echo "   3. 可以访问共享目录中的文件"
        echo "   4. 文件管理器提供更多文件操作功能"
    fi
}

# 主程序逻辑
main() {
    local command=""
    local service_type="server"
    local background=false
    local port=""
    local directory=""
    local with_guide=false
    
    # 解析命令行参数
    while [[ $# -gt 0 ]]; do
        case $1 in
            start)
                command="start"
                shift
                ;;
            stop)
                command="stop"
                shift
                ;;
            status)
                command="status"
                shift
                ;;
            info)
                command="info"
                shift
                ;;
            -t|--type)
                service_type="$2"
                shift 2
                ;;
            -d|--dir)
                directory="$2"
                shift 2
                ;;
            -p|--port)
                port="$2"
                shift 2
                ;;
            -b|--background)
                background=true
                shift
                ;;
            -g|--with-guide)
                with_guide=true
                shift
                ;;
            -h|--help)
                show_help
                exit 0
                ;;
            *)
                echo -e "${RED}未知参数: $1${NC}"
                show_help
                exit 1
                ;;
        esac
    done
    
    # 执行相应命令
    case $command in
        start)
            start_web $service_type $background $port $directory
            if [ "$background" != "true" ]; then
                show_info $with_guide $port
            fi
            ;;
        stop)
            stop_web $service_type
            ;;
        status)
            status_web $service_type
            ;;
        info)
            show_info $with_guide $port
            ;;
        *)
            echo -e "${RED}请指定有效命令${NC}"
            show_help
            exit 1
            ;;
    esac
}

# 执行主程序
main "$@"