#!/bin/bash

# Web服务统一管理器
# 支持管理Web服务器和VS Code Server服务

# 颜色定义
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# 默认配置
WEBSITE_DIR="./termux-server-suite/my-website"
DEFAULT_WEB_PORT=8000
DEFAULT_VSCODE_PORT=8080

# 显示使用帮助
show_help() {
    echo "Web服务统一管理器"
    echo ""
    echo "用法:"
    echo "  $0 [命令] [选项]"
    echo ""
    echo "命令:"
    echo "  start     启动指定类型的服务"
    echo "  stop      停止指定类型的服务"
    echo "  restart   重启指定类型的服务"
    echo "  status    检查指定类型的服务状态"
    echo "  toggle    切换指定类型的服务状态"
    echo "  info      显示指定类型的服务连接信息"
    echo ""
    echo "选项:"
    echo "  --type <server|manager|vscode>  指定服务类型 (默认: server)"
    echo "  --background                    在后台启动管理器"
    echo "  --with-guide                    显示连接指南"
    echo ""
    echo "示例:"
    echo "  $0 start --type server          启动Web服务器"
    echo "  $0 stop --type vscode           停止VS Code Server"
    echo "  $0 toggle --type server         切换Web服务器状态"
}

# 获取本地IP地址
get_local_ip() {
    local ip=""
    
    # 尝试使用ip命令获取IP地址
    if command -v ip >/dev/null 2>&1; then
        ip=$(ip route get 1.1.1.1 2>/dev/null | awk '{print $7}' | head -n 1)
    fi
    
    # 如果ip命令失败，尝试使用ifconfig
    if [ -z "$ip" ] && command -v ifconfig >/dev/null 2>&1; then
        ip=$(ifconfig 2>/dev/null | grep -Eo 'inet (addr:)?([0-9]*\.){3}[0-9]*' | grep -Eo '([0-9]*\.){3}[0-9]*' | grep -v '127.0.0.1' | head -n 1)
    fi
    
    # 如果ifconfig也失败，尝试使用netcfg
    if [ -z "$ip" ] && command -v netcfg >/dev/null 2>&1; then
        ip=$(netcfg 2>/dev/null | grep -Eo '([0-9]*\.){3}[0-9]*' | grep -v '127.0.0.1' | head -n 1)
    fi
    
    # 如果netcfg也失败，尝试使用hostname命令
    if [ -z "$ip" ] && command -v hostname >/dev/null 2>&1; then
        ip=$(hostname -I 2>/dev/null | awk '{print $1}')
    fi
    
    echo "$ip"
}

# 检查端口是否被占用
is_port_in_use() {
    local port=$1
    if netstat -tuln 2>/dev/null | grep -q ":$port "; then
        return 0  # 端口被占用
    else
        return 1  # 端口未被占用
    fi
}

# 启动Web服务器
start_web_server() {
    echo -e "${BLUE}正在启动Web服务器...${NC}"
    
    # 检查网站目录是否存在
    if [ ! -d "$WEBSITE_DIR" ]; then
        echo -e "${RED}错误: 网站目录不存在: $WEBSITE_DIR${NC}"
        exit 1
    fi
    
    # 检查端口是否被占用
    if is_port_in_use $DEFAULT_WEB_PORT; then
        echo -e "${YELLOW}警告: 端口 $DEFAULT_WEB_PORT 已被占用${NC}"
        echo -e "${YELLOW}请先停止占用该端口的服务${NC}"
        exit 1
    fi
    
    # 启动Web服务器
    cd "$WEBSITE_DIR" || exit 1
    python3 -m http.server $DEFAULT_WEB_PORT > /dev/null 2>&1 &
    local pid=$!
    cd - > /dev/null
    
    # 保存PID到文件
    echo $pid > /tmp/webserver.pid
    
    sleep 1
    
    # 检查服务是否启动成功
    if is_port_in_use $DEFAULT_WEB_PORT; then
        echo -e "${GREEN}✅ Web服务器启动成功${NC}"
        echo -e "${GREEN}端口: $DEFAULT_WEB_PORT${NC}"
        echo -e "${GREEN}目录: $WEBSITE_DIR${NC}"
    else
        echo -e "${RED}❌ Web服务器启动失败${NC}"
        rm -f /tmp/webserver.pid
        exit 1
    fi
}

# 停止Web服务器
stop_web_server() {
    echo -e "${BLUE}正在停止Web服务器...${NC}"
    
    # 检查PID文件是否存在
    if [ -f /tmp/webserver.pid ]; then
        local pid=$(cat /tmp/webserver.pid)
        if kill -0 $pid 2>/dev/null; then
            kill $pid
            rm -f /tmp/webserver.pid
            echo -e "${GREEN}✅ Web服务器已停止${NC}"
        else
            echo -e "${YELLOW}⚠️  Web服务器未运行${NC}"
            rm -f /tmp/webserver.pid
        fi
    else
        # 尝试通过pkill停止
        if pkill -f "python3 -m http.server $DEFAULT_WEB_PORT" > /dev/null 2>&1; then
            echo -e "${GREEN}✅ Web服务器已停止${NC}"
        else
            echo -e "${YELLOW}⚠️  Web服务器未运行${NC}"
        fi
    fi
}

# 检查Web服务器状态
check_web_server_status() {
    if is_port_in_use $DEFAULT_WEB_PORT; then
        echo -e "${GREEN}✅ Web服务器正在运行${NC}"
        return 0
    else
        echo -e "${RED}❌ Web服务器未运行${NC}"
        return 1
    fi
}

# 启动VS Code Server
start_vscode_server() {
    echo -e "${BLUE}正在启动VS Code Server...${NC}"
    
    # 检查code-server是否已安装
    if ! command -v code-server >/dev/null 2>&1; then
        echo -e "${YELLOW}⚠️  code-server未安装，正在尝试安装...${NC}"
        
        # 尝试安装code-server
        if command -v npm >/dev/null 2>&1; then
            npm install -g code-server
            if [ $? -ne 0 ]; then
                echo -e "${RED}❌ code-server安装失败${NC}"
                exit 1
            fi
            echo -e "${GREEN}✅ code-server安装成功${NC}"
        else
            echo -e "${RED}❌ 未找到npm，请先安装Node.js${NC}"
            exit 1
        fi
    fi
    
    # 检查端口是否被占用
    if is_port_in_use $DEFAULT_VSCODE_PORT; then
        echo -e "${YELLOW}警告: 端口 $DEFAULT_VSCODE_PORT 已被占用${NC}"
        echo -e "${YELLOW}请先停止占用该端口的服务${NC}"
        exit 1
    fi
    
    # 启动VS Code Server
    code-server --port $DEFAULT_VSCODE_PORT --host 0.0.0.0 --auth none ./ > /dev/null 2>&1 &
    local pid=$!
    
    # 保存PID到文件
    echo $pid > /tmp/vscode.pid
    
    sleep 2
    
    # 检查服务是否启动成功
    if is_port_in_use $DEFAULT_VSCODE_PORT; then
        echo -e "${GREEN}✅ VS Code Server启动成功${NC}"
        echo -e "${GREEN}端口: $DEFAULT_VSCODE_PORT${NC}"
    else
        echo -e "${RED}❌ VS Code Server启动失败${NC}"
        rm -f /tmp/vscode.pid
        exit 1
    fi
}

# 停止VS Code Server
stop_vscode_server() {
    echo -e "${BLUE}正在停止VS Code Server...${NC}"
    
    # 检查PID文件是否存在
    if [ -f /tmp/vscode.pid ]; then
        local pid=$(cat /tmp/vscode.pid)
        if kill -0 $pid 2>/dev/null; then
            kill $pid
            rm -f /tmp/vscode.pid
            echo -e "${GREEN}✅ VS Code Server已停止${NC}"
        else
            echo -e "${YELLOW}⚠️  VS Code Server未运行${NC}"
            rm -f /tmp/vscode.pid
        fi
    else
        # 尝试通过pkill停止
        if pkill -f "code-server.*--port $DEFAULT_VSCODE_PORT" > /dev/null 2>&1; then
            echo -e "${GREEN}✅ VS Code Server已停止${NC}"
        else
            echo -e "${YELLOW}⚠️  VS Code Server未运行${NC}"
        fi
    fi
}

# 检查VS Code Server状态
check_vscode_server_status() {
    if is_port_in_use $DEFAULT_VSCODE_PORT; then
        echo -e "${GREEN}✅ VS Code Server正在运行${NC}"
        return 0
    else
        echo -e "${RED}❌ VS Code Server未运行${NC}"
        return 1
    fi
}

# 显示Web服务器连接信息
show_web_server_info() {
    local show_guide=$1
    
    if check_web_server_status > /dev/null 2>&1; then
        local ip=$(get_local_ip)
        if [ -n "$ip" ]; then
            echo -e "${GREEN}Web服务器连接信息:${NC}"
            echo "  地址: http://$ip:$DEFAULT_WEB_PORT"
            echo "  端口: $DEFAULT_WEB_PORT"
            echo "  目录: $WEBSITE_DIR"
            
            if [ "$show_guide" = "true" ]; then
                echo ""
                echo -e "${BLUE}使用说明:${NC}"
                echo "  1. 在浏览器中打开上述地址"
                echo "  2. 即可访问托管的网站内容"
            fi
        else
            echo -e "${RED}无法获取本地IP地址${NC}"
        fi
    else
        echo -e "${RED}Web服务器未运行${NC}"
    fi
}

# 显示VS Code Server连接信息
show_vscode_server_info() {
    local show_guide=$1
    
    if check_vscode_server_status > /dev/null 2>&1; then
        local ip=$(get_local_ip)
        if [ -n "$ip" ]; then
            echo -e "${GREEN}VS Code Server连接信息:${NC}"
            echo "  地址: http://$ip:$DEFAULT_VSCODE_PORT"
            echo "  端口: $DEFAULT_VSCODE_PORT"
            
            if [ "$show_guide" = "true" ]; then
                echo ""
                echo -e "${BLUE}使用说明:${NC}"
                echo "  1. 在浏览器中打开上述地址"
                echo "  2. 即可访问完整的VS Code环境"
                echo "  3. 可以直接编辑项目文件"
                echo "  4. 支持扩展安装和终端使用"
            fi
        else
            echo -e "${RED}无法获取本地IP地址${NC}"
        fi
    else
        echo -e "${RED}VS Code Server未运行${NC}"
    fi
}

# 切换Web服务器状态
toggle_web_server() {
    if check_web_server_status > /dev/null 2>&1; then
        stop_web_server
    else
        start_web_server
    fi
}

# 切换VS Code Server状态
toggle_vscode_server() {
    if check_vscode_server_status > /dev/null 2>&1; then
        stop_vscode_server
    else
        start_vscode_server
    fi
}

# 主程序
main() {
    # 解析命令行参数
    local command=""
    local service_type="server"
    local background=false
    local with_guide=false
    
    while [[ $# -gt 0 ]]; do
        case $1 in
            start|stop|restart|status|toggle|info)
                command=$1
                shift
                ;;
            --type)
                service_type="$2"
                shift 2
                ;;
            --background)
                background=true
                shift
                ;;
            --with-guide)
                with_guide=true
                shift
                ;;
            -h|--help)
                show_help
                exit 0
                ;;
            *)
                echo -e "${RED}未知参数: $1${NC}"
                show_help
                exit 1
                ;;
        esac
    done
    
    # 根据服务类型执行相应操作
    case $service_type in
        server)
            case $command in
                start)
                    start_web_server
                    ;;
                stop)
                    stop_web_server
                    ;;
                restart)
                    stop_web_server
                    sleep 1
                    start_web_server
                    ;;
                status)
                    check_web_server_status
                    ;;
                toggle)
                    toggle_web_server
                    ;;
                info)
                    show_web_server_info $with_guide
                    ;;
                *)
                    echo -e "${RED}未知命令: $command${NC}"
                    show_help
                    exit 1
                    ;;
            esac
            ;;
        vscode)
            case $command in
                start)
                    start_vscode_server
                    ;;
                stop)
                    stop_vscode_server
                    ;;
                restart)
                    stop_vscode_server
                    sleep 1
                    start_vscode_server
                    ;;
                status)
                    check_vscode_server_status
                    ;;
                toggle)
                    toggle_vscode_server
                    ;;
                info)
                    show_vscode_server_info $with_guide
                    ;;
                *)
                    echo -e "${RED}未知命令: $command${NC}"
                    show_help
                    exit 1
                    ;;
            esac
            ;;
        *)
            echo -e "${RED}未知服务类型: $service_type${NC}"
            show_help
            exit 1
            ;;
    esac
}

# 执行主程序
main "$@"