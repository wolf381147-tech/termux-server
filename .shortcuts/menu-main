#!/bin/bash

# Termux 服务器主菜单
# 简化版服务器管理界面

# 颜色定义
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

# 显示使用说明
show_usage() {
    echo "Termux Server Suite 交互式菜单"
    echo ""
    echo "使用方法:"
    echo "  1. 首先添加执行权限:"
    echo "     chmod +x .shortcuts/menu-main"
    echo ""
    echo "  2. 然后启动菜单:"
    echo "     ./.shortcuts/menu-main"
    echo ""
    echo "  或者直接运行（无需添加权限）:"
    echo "     bash .shortcuts/menu-main"
    echo ""
    echo "菜单功能:"
    echo "  1. 启动所有服务 - 启动SSH、Web以及后台监控服务"
    echo "  2. 停止所有服务 - 停止所有正在运行的服务"
    echo "  3. 服务器监控面板 - 查看服务状态和系统信息"
    echo "  4. 帮助文档 - 显示帮助信息"
    echo "  0. 退出 - 退出菜单程序"
    echo ""
}

# 检查是否显示帮助
if [[ "$1" == "-h" || "$1" == "--help" ]]; then
    show_usage
    exit 0
fi

# 检查执行权限
check_permissions() {
    if [[ ! -x "$0" ]]; then
        echo -e "${YELLOW}警告: 当前脚本没有执行权限${NC}"
        echo "建议添加执行权限以方便使用:"
        echo "  chmod +x .shortcuts/menu-main"
        echo ""
        echo "或者使用以下方式运行:"
        echo "  bash .shortcuts/menu-main"
        echo ""
        read -p "按回车键继续以当前方式运行..."
    fi
}

# 显示主菜单
show_main_menu() {
    clear
    echo "=========================================="
    echo "           🚀 Termux 服务器项目"
    echo "=========================================="
    echo "1. ▶️  启动所有服务"
    echo "2. ⏹️  停止所有服务"
    echo "3. 🖥️  服务器监控面板"
    echo "4. 📚 帮助文档"
    echo "0. 🚪 退出"
    echo "=========================================="
}

# 启动所有服务
start_all_services() {
    clear
    echo "=========================================="
    echo "           🚀 启动所有服务"
    echo "=========================================="
    
    echo "启动SSH服务..."
    ssh_start
    
    echo ""
    echo "启动Web服务..."
    web_start
    
    echo ""
    echo "启动健康检查服务..."
    # 使用PM2启动健康检查
    npx pm2 start termux-server-suite/system/health-check.js --name health-check > /dev/null 2>&1
    
    echo ""
    echo "启动服务监控..."
    # 使用PM2启动服务监控
    npx pm2 start termux-server-suite/system/service-monitor.js --name service-monitor > /dev/null 2>&1
    
    echo ""
    echo "启动唤醒锁管理..."
    # 使用PM2启动唤醒锁管理
    npx pm2 start termux-server-suite/system/wakelock-manager.js --name wakelock-manager > /dev/null 2>&1
    
    echo ""
    echo -e "${GREEN}所有服务已启动${NC}"
    read -p "按回车键继续..."
}

# 停止所有服务
stop_all_services() {
    clear
    echo "=========================================="
    echo "           ⏹️  停止所有服务"
    echo "=========================================="
    
    echo "停止SSH服务..."
    ssh_stop
    
    echo ""
    echo "停止Web服务..."
    web_stop
    
    echo ""
    echo "停止PM2管理的服务..."
    # 停止PM2管理的所有服务
    npx pm2 stop all > /dev/null 2>&1
    
    echo ""
    echo -e "${GREEN}所有服务已停止${NC}"
    read -p "按回车键继续..."
}

# SSH服务操作函数
ssh_start() {
    # 检查是否已运行
    if pgrep -f "sshd" > /dev/null; then
        echo -e "${YELLOW}SSH服务已在运行${NC}"
        return
    fi
    
    # 启动SSH服务
    sshd
    if [ $? -eq 0 ]; then
        echo -e "${GREEN}SSH服务启动成功${NC}"
    else
        echo -e "${RED}SSH服务启动失败${NC}"
    fi
}

ssh_stop() {
    # 停止SSH服务
    pkill sshd > /dev/null 2>&1
    if [ $? -eq 0 ]; then
        echo -e "${GREEN}SSH服务已停止${NC}"
    else
        echo -e "${YELLOW}未找到运行中的SSH服务${NC}"
    fi
}

# Web服务操作函数
web_start() {
    local web_dir="/data/data/com.termux/files/home/storage/shared/termux-projects"
    local port=8000
    
    # 检查是否已运行
    if pgrep -f "python.*http.server.*${port}" > /dev/null; then
        echo -e "${YELLOW}Web服务已在运行${NC}"
        return
    fi
    
    # 检查目录是否存在
    if [ ! -d "$web_dir" ]; then
        echo -e "${YELLOW}Web目录不存在，创建目录${NC}"
        mkdir -p "$web_dir"
    fi
    
    # 启动Web服务
    cd "$web_dir" && python -m http.server $port > /dev/null 2>&1 &
    if [ $? -eq 0 ]; then
        echo -e "${GREEN}Web服务启动成功${NC}"
        echo "访问地址: http://localhost:$port"
    else
        echo -e "${RED}Web服务启动失败${NC}"
    fi
}

web_stop() {
    # 停止Web服务
    pkill -f "python.*http.server" > /dev/null 2>&1
    if [ $? -eq 0 ]; then
        echo -e "${GREEN}Web服务已停止${NC}"
    else
        echo -e "${YELLOW}未找到运行中的Web服务${NC}"
    fi
}

# 显示服务器监控面板
show_monitor_panel() {
    clear
    echo "=========================================="
    echo "           🖥️  服务器监控面板"
    echo "=========================================="
    
    # 显示服务状态
    echo "服务状态:"
    if pgrep -f "sshd" > /dev/null; then
        echo -e "  🔐 SSH服务: ${GREEN}运行中${NC}"
    else
        echo -e "  🔐 SSH服务: ${RED}已停止${NC}"
    fi
    
    if pgrep -f "python.*http.server.*8000" > /dev/null; then
        echo -e "  🌐 Web服务: ${GREEN}运行中${NC}"
    else
        echo -e "  🌐 Web服务: ${RED}已停止${NC}"
    fi
    
    # 显示PM2服务状态
    echo ""
    echo "后台服务状态:"
    npx pm2 list
    
    # 显示系统信息
    echo ""
    echo "系统信息:"
    echo "  用户名: $(whoami)"
    echo "  系统时间: $(date)"
    
    # 显示网络信息
    echo ""
    echo "网络信息:"
    local local_ip=$(ip addr show wlan0 2>/dev/null | grep "inet " | awk '{print $2}' | cut -d/ -f1)
    local public_ip=$(curl -s https://api.ipify.org 2>/dev/null || echo "无法获取")
    echo "  本地IP: ${local_ip:-未连接}"
    echo "  公网IP: ${public_ip}"
    
    # 显示连接信息
    echo ""
    echo "连接信息:"
    echo "  SSH: ssh -p 8022 $(whoami)@${local_ip:-localhost}"
    echo "  Web: http://${local_ip:-localhost}:8000"
    
    echo ""
    echo "提示: 可以通过浏览器访问Web监控面板"
    echo "  地址: http://${local_ip:-localhost}:8000"
    
    echo ""
    read -p "按回车键返回主菜单..."
}

# 显示帮助文档
show_help() {
    clear
    echo "=========================================="
    echo "           📚 帮助文档"
    echo "=========================================="
    echo "Termux 服务器项目是一个在Android设备上运行的完整服务器解决方案。"
    echo ""
    echo "主要功能:"
    echo "  ▶️  启动所有服务 - 启动SSH、Web以及后台监控服务"
    echo "  ⏹️  停止所有服务 - 停止所有正在运行的服务"
    echo "  🖥️  服务器监控面板 - 查看服务状态和系统信息"
    echo "  📚 帮助文档 - 显示帮助信息"
    echo ""
    echo "服务详情:"
    echo "  🔐 SSH服务 - 端口 8022，允许远程连接到设备"
    echo "  🌐 Web服务 - 端口 8000，托管静态网站内容"
    echo "  ⚙️  后台服务 - 包括健康检查、服务监控和唤醒锁管理"
    echo ""
    echo "使用方法:"
    echo "  1. 添加执行权限:"
    echo "     chmod +x .shortcuts/menu-main"
    echo ""
    echo "  2. 启动菜单:"
    echo "     ./.shortcuts/menu-main"
    echo ""
    echo "  或者直接运行（无需添加权限）:"
    echo "     bash .shortcuts/menu-main"
    echo ""
    echo "更新项目:"
    echo "  拉取最新更新: git pull origin main"
    echo ""
    echo "注意事项:"
    echo "  - 长时间运行唤醒锁可能会消耗电池电量"
    echo "  - 在公网环境下运行服务时，请确保采取适当的安全措施"
    echo "  - 请勿将敏感信息提交到版本控制系统"
    echo ""
    read -p "按回车键返回主菜单..."
}

# 检查权限
check_permissions

# 主菜单循环
main_menu_loop() {
    while true; do
        show_main_menu
        read -p "请选择操作 [0-4]: " choice
        
        case $choice in
            1)
                start_all_services
                ;;
            2)
                stop_all_services
                ;;
            3)
                show_monitor_panel
                ;;
            4)
                show_help
                ;;
            0)
                echo "退出程序"
                exit 0
                ;;
            *)
                echo "无效选择"
                read -p "按回车键继续..."
                ;;
        esac
    done
}

# 启动主菜单
main_menu_loop