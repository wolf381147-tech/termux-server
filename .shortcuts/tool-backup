#!/bin/bash

# 系统状态快照工具
# 专注于保存和恢复完整的Termux运行环境

# 默认配置
BACKUP_DIR="$HOME/storage/shared"
TIMESTAMP=$(date +%Y%m%d-%H%M%S)

# 颜色定义
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# 显示帮助信息
show_help() {
    echo "用法: tool-backup [选项] <命令>"
    echo ""
    echo "说明: 本工具专注于保存和恢复完整的Termux运行环境，"
    echo "      与Git版本控制协同工作而非替代它。"
    echo ""
    echo "命令:"
    echo "  snapshot  创建系统状态快照"
    echo "  list      列出快照文件"
    echo "  restore   从快照恢复"
    echo "  clean     清理旧快照"
    echo ""
    echo "选项:"
    echo "  -n, --name NAME         快照名称"
    echo "  -d, --dir DIRECTORY     快照目录"
    echo "  -k, --keep NUMBER       保留快照数量"
    echo "  -h, --help              显示此帮助信息"
    echo ""
    echo "示例:"
    echo "  tool-backup snapshot"
    echo "  tool-backup list"
    echo "  tool-backup clean --keep 3"
}

# 创建快照目录
create_snapshot_dir() {
    local snapshot_name=$1
    local snapshot_path="$BACKUP_DIR/$snapshot_name"
    
    if mkdir -p "$snapshot_path"; then
        echo "$snapshot_path"
        return 0
    else
        echo -e "${RED}无法创建快照目录: $snapshot_path${NC}" >&2
        return 1
    fi
}

# 创建系统状态快照
create_snapshot() {
    local snapshot_name=$1
    
    # 设置默认快照名称
    if [ -z "$snapshot_name" ]; then
        snapshot_name="termux-snapshot-$TIMESTAMP"
    fi
    
    echo -e "${BLUE}开始创建系统状态快照...${NC}"
    
    # 创建快照目录
    local snapshot_path=$(create_snapshot_dir "$snapshot_name")
    if [ $? -ne 0 ]; then
        return 1
    fi
    
    echo -e "${YELLOW}📁 快照目录: $snapshot_name${NC}"
    
    # 1. 备份重要配置和数据
    echo -e "${YELLOW}📋 备份重要配置和数据...${NC}"
    
    # 备份已安装的包列表
    echo -e "${YELLOW}📦 备份已安装的包列表...${NC}"
    if command -v pkg >/dev/null 2>&1; then
        pkg list-installed > "$snapshot_path/installed-packages.txt"
    fi
    
    # 备份Git仓库状态
    echo -e "${YELLOW}🔄 备份Git仓库状态...${NC}"
    cd "$HOME"
    echo "当前分支: $(git branch --show-current 2>/dev/null || echo 'N/A')" > "$snapshot_path/git-status.txt"
    echo "最后提交: $(git log -1 --oneline 2>/dev/null || echo 'N/A')" >> "$snapshot_path/git-status.txt"
    
    # 2. 备份用户数据
    echo -e "${YELLOW}📂 备份用户数据...${NC}"
    if [ -d "$HOME/storage" ]; then
        # 只备份关键用户数据，避免过大文件
        find "$HOME/storage" -type f -name "*.txt" -o -name "*.conf" -o -name "*.json" | head -50 | while read file; do
            # 保持目录结构
            rel_path="${file#$HOME/}"
            mkdir -p "$(dirname "$snapshot_path/user-data/$rel_path")"
            cp "$file" "$snapshot_path/user-data/$rel_path" 2>/dev/null
        done
    fi
    
    # 3. 备份系统信息
    echo -e "${YELLOW}💻 备份系统信息...${NC}"
    {
        echo "快照时间: $(date)"
        echo "系统用户: $(whoami)"
        echo "系统架构: $(uname -m)"
        echo "系统版本: $(uname -r)"
        echo "工作目录: $(pwd)"
    } > "$snapshot_path/system-info.txt"
    
    # 4. 创建恢复脚本
    echo -e "${YELLOW}🔧 创建恢复脚本...${NC}"
    cat > "$snapshot_path/restore.sh" << 'EOF'
#!/bin/bash
# Termux系统状态恢复脚本

echo "开始恢复系统状态..."

# 恢复已安装的包
if [ -f "installed-packages.txt" ]; then
    echo "恢复已安装的包..."
    while read package; do
        pkg install -y "$package" 2>/dev/null
    done < installed-packages.txt
fi

# 恢复用户数据
if [ -d "user-data" ]; then
    echo "恢复用户数据..."
    cp -r user-data/* "$HOME/" 2>/dev/null
fi

echo "系统状态恢复完成"
EOF
    
    chmod +x "$snapshot_path/restore.sh"
    
    echo -e "${GREEN}✅ 系统状态快照创建完成${NC}"
    echo -e "${BLUE}快照位置: $snapshot_path${NC}"
}

# 列出快照文件
list_snapshots() {
    echo -e "${BLUE}系统状态快照列表:${NC}"
    echo "=========================================="
    
    if [ -d "$BACKUP_DIR" ]; then
        ls -la "$BACKUP_DIR" | grep "termux-snapshot-" | head -20
    else
        echo -e "${YELLOW}快照目录不存在${NC}"
    fi
}

# 清理旧快照
clean_snapshots() {
    local keep_count=$1
    
    if [ -z "$keep_count" ]; then
        keep_count=3
    fi
    
    echo -e "${BLUE}清理旧快照，保留最近 $keep_count 个...${NC}"
    
    if [ -d "$BACKUP_DIR" ]; then
        cd "$BACKUP_DIR"
        # 找到所有快照文件，按时间排序，删除超出保留数量的
        ls -t | grep "termux-snapshot-" | tail -n +$((keep_count + 1)) | while read -r snapshot; do
            echo -e "${YELLOW}删除旧快照: $snapshot${NC}"
            rm -rf "$snapshot"
        done
        echo -e "${GREEN}✅ 快照清理完成${NC}"
    else
        echo -e "${YELLOW}快照目录不存在${NC}"
    fi
}

# 从快照恢复
restore_snapshot() {
    echo -e "${YELLOW}要从快照恢复，请手动执行快照目录中的restore.sh脚本${NC}"
    echo -e "${BLUE}例如: cd /path/to/snapshot && ./restore.sh${NC}"
}

# 主程序逻辑
main() {
    local command=""
    local snapshot_name=""
    local keep_count=""
    
    # 解析命令行参数
    while [[ $# -gt 0 ]]; do
        case $1 in
            snapshot)
                command="snapshot"
                shift
                ;;
            list)
                command="list"
                shift
                ;;
            restore)
                command="restore"
                shift
                ;;
            clean)
                command="clean"
                shift
                ;;
            -n|--name)
                snapshot_name="$2"
                shift 2
                ;;
            -d|--dir)
                BACKUP_DIR="$2"
                shift 2
                ;;
            -k|--keep)
                keep_count="$2"
                shift 2
                ;;
            -h|--help)
                show_help
                exit 0
                ;;
            *)
                echo -e "${RED}未知参数: $1${NC}"
                show_help
                exit 1
                ;;
        esac
    done
    
    # 执行相应命令
    case $command in
        snapshot)
            create_snapshot $snapshot_name
            ;;
        list)
            list_snapshots
            ;;
        restore)
            restore_snapshot
            ;;
        clean)
            clean_snapshots $keep_count
            ;;
        *)
            echo -e "${RED}请指定有效命令${NC}"
            show_help
            exit 1
            ;;
    esac
}

# 执行主程序
main "$@"